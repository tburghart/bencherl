

# Runs the benchmark suite based on what is specified in conf/run.conf.
# Usage: ./bencherl [-m <mnemonic_name>]

usage()
{
    cat << EOF
Usage: bencherl [OPTION..]
Run scalability benchmarks.

  -h         display this help and exit
  -l         list all the available benchmarks
  -m <MN>    use MN as the mnemonic name of this run

For complete documentation, go to http://release.softlab.ntua.gr/bencherl/
EOF
}

plot() {
    lines=$(cut -f1,2 $4 | sort | uniq)
    gnuplot <(
        echo "set title '$1'"
        echo "set autoscale"
        echo "set key right font ',14'"
        echo "set xtic auto"
        echo "set ytic auto"
        echo "set xlabel '$2'"
        echo "set ylabel '$3'"
        echo "set term svg size 720,432 dynamic"
        echo "set object 1 rect from screen 0, 0, 0 to screen 1, 1, 0 behind"
        echo "set object 1 rect fc  rgb 'white'  fillstyle solid 1.0"
        echo "set output '$5'"
        echo "set grid"
        echo -n "plot "
        first=1
        OLD_IFS=$IFS
        IFS=$'\n'
        for line in $lines
        do
	    if [ $first -eq 1 ]; then
	        first=0
	    else
	        echo -n ", "
	    fi
	    echo -n "'-' using 1:2 title '$line' w l lw 2"
	    # for errorbars instead use:
	    #echo -n "'-' using 1:2:3:4 title '$line' w yerrorlines lw 2"
        done
        echo ""
        for line in $lines
        do
	    grstr=$(echo "$line" | sed -e 's/\([][]\)/\\\1/g')
	    grep "$grstr" $4 | cut -f3,4
	    echo "e"
        done
        echo ""
        echo "exit"
        IFS=$OLD_IFS
        )
}

speedup() {
    OLD_IFS=$IFS
    IFS=$'\n'
    for line in $(cat $1)
    do
        name=$(echo $line | cut -f1,2)
        sched=$(echo $line | cut -f3)
        echo -n -e "$name\t$sched\t"
        IFS=" "
        read -a nums <<< $(echo $line | cut -f4-)
        grstr=$(echo "$name" | sed -e 's/\([][]\)/\\\1/g')
        read -a seqrun <<< $(grep "${grstr}	1	" $1 | cut -f4-)
        for ((i=0;i<${#nums[@]};i++))
        do
	    bc -l <<< "${seqrun[i]}/${nums[i]}" | tr '\n' ' '
        done
        echo ""
    done
    IFS=$OLD_IFS
}

spin()
{
    while ps | grep $1 &>/dev/null; do
        i=0
        while [ "$i" -lt "3" ]; do
	    echo -n "."
	    i=$[$i+1]
	    sleep 0.5
        done
        i=0
        while [ "$i" -lt "3" ]; do
	    echo -ne '\b \b'
	    i=$[$i+1]
	    sleep 0.5
        done
    done
}

list_bms()
{
    echo -n "Benchmarks:"
    for b in `ls $BENCHERL_ROOT/bench`; do
        if [ -d $BENCHERL_ROOT/bench/$b ]; then
	    echo -n " $b"
        fi
    done
    echo
}

cbm()
{
    benchdir=`cd $BENCHERL_ROOT/bench/$bench; pwd`

    for otp in $OTPS; do
        otpl=${otp%%=*}
        otpv=${otp##*=}
        if [ -z $otpv ]; then
            erl="erl"
            erlc="erlc"
        else
            erl="$otpv/bin/erl"
            erlc="$otpv/bin/erlc"
        fi
        erl_lib_dir=`$erl -noshell -eval "io:format(\"~s~n\", [code:lib_dir()]), halt()."`

        ( cd $BENCHERL_ROOT/bench/$bench && make bench ERLC=${erlc} ERL=${erl} ERL_LIB_DIR=${erl_lib_dir} OTP=${otpl} )
   
        for app in $DEPENDENCIES; do
            ( cd $BENCHERL_ROOT/app/$app && make app ERLC=${erlc} ERL=${erl} ERL_LIB_DIR=${erl_lib_dir} OTP=${otpl} )
        done
    done
}

rbm()
{
    mkdir -p $outdir
    mkdir -p $measdir

    for otp in $OTPS; do
        otpl=${otp%%=*}
        otpv=${otp##*=}

        for args in $ERL_ARGS; do
	    argsl=${args%%=*}
	    argsv=${args##*=}
	    IFS=$OLD_IFS
	    n=`echo $NUMBER_OF_SLAVE_NODES | tr "," "\n" | tail -n 1`
	    IFS=$NEW_IFS

            if [[ ( $NUMBER_OF_NUMBER_OF_SCHEDULERS -gt 1 ) || ( $NUMBER_OF_NUMBER_OF_SLAVE_NODES -eq 1 ) ]]; then
                if [ "$n" -gt "$NSLAVE_NODES" ]; then
		    n=$NSLAVE_NODES
                fi
                for s in $NUMBER_OF_SCHEDULERS; do
		    WHAT="sched"
		    rsbm
                done
	    fi

            IFS=$OLD_IFS
            s=`echo $NUMBER_OF_SCHEDULERS | tr "," "\n" | tail -n 1`
            IFS=$NEW_IFS

            if [[ ( $NUMBER_OF_NUMBER_OF_SLAVE_NODES -gt 1 ) ]]; then
                for n in $NUMBER_OF_SLAVE_NODES; do
                    if [ "$n" -gt "$NSLAVE_NODES" ]; then
                        continue
                    fi
                    WHAT="node"
                    rsbm
                done
            fi
        done
    done
}

rsbm()
{
    IFS=$OLD_IFS

    benchdir=$BENCHERL_ROOT/bench/$bench

    if [ -z $otpv ]; then
        erl="erl"
    else
        erl="$otpv/bin/erl"
    fi

    if [ "$USE_LONG_NAMES" -eq "1" ]; then
        uln="true"
        mn="-name ${MASTER_NODE}"
    else
        uln="false"
        mn="-sname ${MASTER_NODE}"
    fi

    if [ "$SKIP_SLAVE_SETUP" -eq "1" ]; then
        sss="true"
    else
        sss="false"
    fi

    DEPS_PATHS=
    if [ ! -z "$DEPENDENCIES" ]; then
        for app in $DEPENDENCIES; do
            DEPS_PATHS="$DEPS_PATHS ${BENCHERL_ROOT}/app/$app/ebin-$otpl"
        done
    fi

    cat > $BENCHERL_ROOT/scratch/run_bench.conf << EOF
{bench, $bench}.
{version, $VERSION}.
{otp, "$otpv"}.
{erl_args, "$argsv $EXTRA_ERL_ARGS +S$s:$s -noshell -pa $EXTRA_CODE_PATH $DEPS_PATHS ${BENCHERL_ROOT}/suite/ebin-$otpl ${BENCHERL_ROOT}/bench/$bench/ebin-$otpl -setcookie '$COOKIE'" }.
{number_of_slaves, $n}.
{number_of_schedulers, $s}.
{slaves, [$SLAVE_NODES]}.
{master, '$MASTER_NODE'}.
{iterations, $ITERATIONS}.
{outfile, "$outdir/$otpl.$argsl.$s.$n.output"}.
{measfile, "$measdir/$otpl.$argsl.$WHAT.time"}.
{datadir, "$benchdir/data"}.
{what, $WHAT}.
{use_long_names, $uln}.
{number_of_cores, $CORES}.
{output_format, $OUTPUT_FORMAT}.
{skip_slave_setup, $sss}.
EOF

    if [ -f $BENCHERL_ROOT/bench/$bench/conf/pre_bench ]; then
        $BENCHERL_ROOT/bench/$bench/conf/pre_bench $s "$otpv" "$argsv" \
            "$COOKIE" "$SLAVE_NODES" $n "$otpl" "$EXTRA_CODE_PATH" \
            "$DEPS_PATHS" "$ERL_ENV" "$erl" "$BENCHERL_ROOT"
    fi

    curdir=`pwd`
    if [ ! -z "$WORKING_DIRECTORY" ]; then
        cd $WORKING_DIRECTORY
    fi

    ERL_CMD="BENCHERL_ROOT=${BENCHERL_ROOT} ${ERL_ENV} ${erl} ${argsv} ${EXTRA_ERL_ARGS} -setcookie \"${COOKIE}\" +S$s:$s \
        $mn -noshell -pa ${EXTRA_CODE_PATH} ${DEPS_PATHS} \
        ${BENCHERL_ROOT}/suite/ebin-$otpl \
        ${BENCHERL_ROOT}/bench/$bench/ebin-$otpl -s run_bench main -s erlang \
        halt"
    eval $ERL_CMD

    if [ -f $BENCHERL_ROOT/bench/$bench/conf/post_bench ]; then
	$BENCHERL_ROOT/bench/$bench/conf/post_bench $s "$otpv" "$argsv" \
            "$COOKIE" "$SLAVE_NODES" $n "$otpl" "$EXTRA_CODE_PATH" \
            "$DEPS_PATHS" "$ERL_ENV" "$erl" "$BENCHERL_ROOT"
    fi

    cd $curdir

    IFS=$NEW_IFS
}

chkbm()
{
    local succeeded=1
    NF=`ls -1 $benchresdir/output/*.output | wc -l`
    if [ "$NF" -gt "1" ]; then
        BF=`ls -1 $benchresdir/output/*.output | head -n 1`
        for f in `ls $benchresdir/output/*.output`; do
            diff=`diff -B -q $BF $f`
            if [ ! -z "$diff" ]; then
                succeeded=0
                break
            fi
        done
    fi
    return $succeeded
}

pbm()
{
    mkdir -p $grdir

    if [[ ( "$NSLAVE_NODES" -gt "1" ) && ( "$NUMBER_OF_NUMBER_OF_SLAVE_NODES" -gt "1" ) ]]; then
        WHAT=node.time
        psbm
    fi
    if [ "$NUMBER_OF_NUMBER_OF_SCHEDULERS" -gt "1" ]; then
        WHAT=sched.time
        psbm
    fi

    if [[ ("$NSLAVE_NODES" -gt "1" ) && ( "$NUMBER_OF_NUMBER_OF_SLAVE_NODES" -gt "1") ]]; then
        for file in `ls $measdir/*.*.node.time`; do
            fn=`basename $file .node.time`
            speedup $measdir/$fn.node.time >> $measdir/$fn.node.speedup
        done
        WHAT=node.speedup
        psbm
    fi
    if [ "$NUMBER_OF_NUMBER_OF_SCHEDULERS" -gt "1" ]; then
        for file in `ls $measdir/*.*.sched.time`; do
            fn=`basename $file .sched.time`
            speedup $measdir/$fn.sched.time >> $measdir/$fn.sched.speedup
        done
        	WHAT=sched.speedup
        	psbm
        fi
}

psbm()
{
    what1=${WHAT%%\.*}
    what2=${WHAT##*\.}

    if [ "$what2" == "time" ]; then
        yal="Time (ms)"
    else
        yal="Speedup"
    fi

    if [ "$what1" == "sched" ]; then
        xal="# Schedulers"
    else
        xal="# Nodes"
    fi

    for file in `ls $measdir/*.$WHAT`; do
        fn=`basename $file .$WHAT`
        otp=${fn%%.*}
        args=${fn##*.}
        PARGS="$PARGS $args"
        POTPS="$POTPS $otp"
        plot "$bench - $otp - $args" \
            "$xal" "$yal" "$measdir/$fn.$WHAT" \
            "$grdir/$fn.$WHAT.svg"
    done

    POTPS=`echo $POTPS | tr " " "\n" | sort -du | tr "\n" " "`
    PARGS=`echo $PARGS | tr " " "\n" | sort -du | tr "\n" " "`
    NOTPS=`echo $POTPS | wc -w`
    NARGS=`echo $PARGS | wc -w`

    if [ "$NARGS" -gt "1" ]; then
        for otp in $POTPS; do
            for file in `ls $measdir/$otp.*.$WHAT`; do
                while IFS='' read -r line
                do
                    fn=`basename $file .$WHAT`
                    line_part1=$(echo "$line" | cut -d$'\t' -f1)
                    line_part2=$(echo "$line" | cut -d$'\t' -f2-)
                    echo -e "$line_part1\t$fn $line_part2" >> $measdir/$otp.$WHAT
                done < $file
            done
            plot "$bench - $otp" \
                "$xal" "$yal" "$measdir/$otp.$WHAT" \
                "$grdir/$otp.$WHAT.svg"
        done
    fi

    if [ "$NOTPS" -gt "1" ]; then
        for args in $PARGS; do
            for file in `ls $measdir/*.$args.$WHAT`; do
                while IFS='' read -r line
                do
                    fn=`basename $file .$WHAT`
                    line_part1=$(echo "$line" | cut -d$'\t' -f1)
                    line_part2=$(echo "$line" | cut -d$'\t' -f2-)
                    echo -e "$line_part1\t$fn $line_part2" >> $measdir/$args.$WHAT
                done < $file
            done
            plot "$bench - $args" "$xal" "$yal" "$measdir/$args.$WHAT" \
                "$grdir/$args.$WHAT.svg"
        done
    fi
    rm -rf $measdir/*.tmp
}

scs()
{
    if [[ "$NUMBER_OF_SCHEDULERS" =~ .*\.\..* ]]; then
        min=`echo $NUMBER_OF_SCHEDULERS | cut -d'.' -f1`
        max=`echo $NUMBER_OF_SCHEDULERS | cut -d'.' -f3`
        NUMBER_OF_SCHEDULERS=`seq $min $max`
    else
        NUMBER_OF_SCHEDULERS=`echo $NUMBER_OF_SCHEDULERS | sed 's/,/ /g'`
    fi
    x=`echo $NUMBER_OF_SCHEDULERS | tr " " "\n" | wc -l`
    if [ $x -ne 1 ]; then
        NUMBER_OF_SCHEDULERS="1 $NUMBER_OF_SCHEDULERS"
    fi
    NUMBER_OF_SCHEDULERS=`echo $NUMBER_OF_SCHEDULERS | tr " " "\n" | sort -gu | tr "\n" ","`
    L=${#NUMBER_OF_SCHEDULERS}
    L=$(( L - 1 ))
    NUMBER_OF_SCHEDULERS=${NUMBER_OF_SCHEDULERS:0:L}
    NUMBER_OF_NUMBER_OF_SCHEDULERS=`echo $NUMBER_OF_SCHEDULERS | tr "," "\n" | wc -l`
}

nds()
{
    if [[ "$NUMBER_OF_SLAVE_NODES" =~ .*\.\..* ]]; then
        min=`echo $NUMBER_OF_SLAVE_NODES | cut -d'.' -f1`
        max=`echo $NUMBER_OF_SLAVE_NODES | cut -d'.' -f3`
        NUMBER_OF_SLAVE_NODES=`seq $min $max`
    else
        NUMBER_OF_SLAVE_NODES=`echo $NUMBER_OF_SLAVE_NODES | sed 's/,/ /g'`
    fi
    NUMBER_OF_SLAVE_NODES=`echo $NUMBER_OF_SLAVE_NODES | tr " " "\n" | sort -gu | tr "\n" ","`
    L=${#NUMBER_OF_SLAVE_NODES}
    L=$(( L - 1 ))
    NUMBER_OF_SLAVE_NODES=${NUMBER_OF_SLAVE_NODES:0:L}
    NUMBER_OF_NUMBER_OF_SLAVE_NODES=`echo $NUMBER_OF_SLAVE_NODES | tr "," "\n" | wc -l`
}

START=`date +%s`
BENCHERL_ROOT=$(pwd)/$( dirname "${BASH_SOURCE[0]}" )

while getopts ":b:chlm:s:n:pi" opt; do
  case $opt in
    h)
      usage
      exit 0
      ;;
    l)
      list_bms
      exit 0
      ;;
    m)
      MNEMONIC_NAME=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done

source $BENCHERL_ROOT/conf/run.conf

if [[ "$OSTYPE" == "darwin"* ]]; then
    CORES=`sysctl hw.ncpu | awk '{print $2}'`
else # Assuming that everything else is Linux! =)
    CORES=`cat /proc/cpuinfo | grep processor | wc -l`
fi

if [ -z $MNEMONIC_NAME ]; then
    MNEMONIC_NAME=`date +%d.%m.%y-%H.%M.%S`
fi

if [ -z $VERSION ]; then
    VERSION=short
fi

if [ -z $OUTPUT_FORMAT ]; then
    OUTPUT_FORMAT=min
fi

LONG_MASTER="master@`hostname -f`"
SHORT_MASTER="master@`hostname`"

DEF_USE_LONG_NAMES=${USE_LONG_NAMES:-1}
DEF_OTPS=${OTPS:-"DEFOTP="}
DEF_ERL_ARGS=${ERL_ARGS:-"DEFARGS= "}
DEF_COOKIE=${COOKIE:-"cookie"}
if [ "$DEF_USE_LONG_NAMES" -eq "1" ]; then
    MASTER=$LONG_MASTER
else
    MASTER=$SHORT_MASTER
fi
DEF_MASTER_NODE=${MASTER_NODE:-$MASTER}
DEF_SLAVE_NODES=$SLAVE_NODES
DEF_PLOT=${PLOT:-1}
DEF_CHECK_SANITY=${CHECK_SANITY:-0}
DEF_ITEARATIONS=${ITERATIONS:-1}
DEF_NUMBER_OF_SLAVE_NODES=${NUMBER_OF_SLAVE_NODES:-0}
DEF_NUMBER_OF_SCHEDULERS=${NUMBER_OF_SCHEDULERS:-$CORES}
DEF_SKIP_SLAVE_SETUP=${SKIP_SLAVE_SETUP:-0}

if [ -z "$INCLUDE_BENCH" ]; then
    for b in `ls $BENCHERL_ROOT/bench`; do
        if [ -d $BENCHERL_ROOT/bench/$b ]; then
            if [ -z "$BENCHES" ]; then
                BENCHES="$b"
            else
                BENCHES="$BENCHES,$b"
            fi
        fi
    done
else
    BENCHES=$INCLUDE_BENCH
fi

if [ ! -z "$EXCLUDE_BENCH" ]; then
    for b in `echo $EXCLUDE_BENCH | tr "," " "`; do
        BENCHES=`echo $BENCHES | tr "," "\n" | grep -v -x "$b" | tr "\n" ","`
    done
fi

OLD_IFS=$IFS
NEW_IFS=$','

if [ -e $BENCHERL_ROOT/results/$MNEMONIC_NAME ]; then
    rm -rf $BENCHERL_ROOT/results/$MNEMONIC_NAME
fi
resdir=$BENCHERL_ROOT/results/$MNEMONIC_NAME
mkdir -p $resdir

IFS=$NEW_IFS

echo -e "\n===> Compiling suite"
for otp in $DEF_OTPS; do

    otpl=${otp%%=*}
    otpv=${otp##*=}

    if [ -z $otpv ]; then
        erl="erl"
        erlc="erlc"
    else
        erl="$otpv/bin/erl"
        erlc="$otpv/bin/erlc"
    fi
    erl_lib_dir=`$erl -noshell -eval "io:format(\"~s~n\", [code:lib_dir()]), halt()."`

    ( cd $BENCHERL_ROOT/suite && make suite ERLC=${erlc} ERL=${erl} ERL_LIB_DIR=${erl_lib_dir} OTP=${otpl} )

done

for bench in $BENCHES; do

    if [ -z $bench ]; then
	continue;
    fi

    IFS=$OLD_IFS

    if [ ! -d $BENCHERL_ROOT/bench/$bench ]; then
        echo -e "\n*** Unknown benchmark: $bench\n"
    else
        echo -e "\n*** Benchmark: $bench\n"

        USE_LONG_NAMES=$DEF_USE_LONG_NAMES
        OTPS=$DEF_OTPS
        ERL_ARGS=$DEF_ERL_ARGS
        COOKIE=$DEF_COOKIE
        MASTER_NODE=$DEF_MASTER_NODE
        SLAVE_NODES=$DEF_SLAVE_NODES
        PLOT=$DEF_PLOT
        CHECK_SANITY=$DEF_CHECK_SANITY
        ITERATIONS=$DEF_ITEARATIONS
        NUMBER_OF_SLAVE_NODES=$DEF_NUMBER_OF_SLAVE_NODES
        NUMBER_OF_SCHEDULERS=$DEF_NUMBER_OF_SCHEDULERS
        SKIP_SLAVE_SETUP=$DEF_SKIP_SLAVE_SETUP

        DEPENDENCIES=
        EXTRA_CODE_PATH=
        EXTRA_ERL_ARGS=
        ERL_ENV=
        WORKING_DIRECTORY=

        benchresdir="$resdir/$bench"
        outdir="$benchresdir/output"
        measdir="$benchresdir/measurements"
        grdir="$benchresdir/graphs"

        mkdir -p $benchresdir

        if [ -f $BENCHERL_ROOT/bench/$bench/conf/bench.conf ]; then
            source $BENCHERL_ROOT/bench/$bench/conf/bench.conf
        fi

        scs
        nds

        if [ -z "$SLAVE_NODES" ]; then
            NSLAVE_NODES=0
        else
            NSLAVE_NODES=`echo $SLAVE_NODES | tr "," "\n" | wc -l`
        fi

        IFS=$NEW_IFS

        echo -e "===> Compiling benchmark"
        cbm
        echo "Done."

        echo -e "===> Running benchmark"
        rbm
        # rbm &
        # spin $!
        echo "Done."

        IFS=$OLD_IFS

        if [ "$CHECK_SANITY" == "1" ]; then
            echo -e "===> Performing sanity check"
            chkbm
            if [ "$?" -eq "1" ]; then
                echo "Succeeded."
            else
                echo "Failed."
            fi
        fi

	if [[ ( "$PLOT" -eq "1" ) && ( ( "$NUMBER_OF_NUMBER_OF_SLAVE_NODES" -ne "1" ) || ( "$NUMBER_OF_NUMBER_OF_SCHEDULERS" -ne "1" ) ) ]]; then
            echo -e "===> Plotting results"
            pbm
            echo "Done."
        fi
    fi

    IFS=$NEW_IFS
done

END=`date +%s`

ELAPSED=$(( END - START ))

echo -e "\nTime elapsed: $ELAPSED sec"
