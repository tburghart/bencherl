#!/usr/bin/false This file is meant to be sourced, not run!
# ======================================================================
#
# sample configuration file
#
# the result of using this file as-is is that all values will be set to
# their defaults and no benchmarks will be run
#
# ======================================================================
#
# Syntax:
#
#   Integer:
#     Integers are resolved according to shell syntax rules.
#
#   Boolean:
#     An integer that equates to zero resolves to 'false', non-zero to 'true'.
#     String evaluation is case-insensitive, and the strings 'y|n', 'yes|no',
#     and 'true|false' are resolved as expected. Beyond those, an empty string
#     resolves to 'false' and a non-empty sting resolves to 'true'.
#
#   Range:
#     The Erlang syntax 'x..y' is supported for expressing integer sequences.
#     A sequence where 'y' is less than 'x' is malformed and likely to result
#     in an error (if you're lucky) or undefined behavior (if you're not).
#
#   List:
#     Lists are delimited by commas (','), allowing them to contain embedded
#     whitespace characters. Where whitespace characters are not relevant (as
#     in lists of integers), they are treated as delimiters as well.
#
#   Integer Lists:
#     Lists of integers may be expressed as any valid mixture of distinct
#     values and (possibly overlapping) Ranges. Integer lists are de-duplicated
#     after Range expansion.
#
#   Paths:
#     Filesystem paths are allowed to contain whitespace, but that is not a
#     recommended pattern and is generally untested.
#
# Predefined Variables:
#
#   The following variables are defined and available for use when
#   configuration files are sourced. Each of these values is readonly and
#   exported - it is an error to attempt to modify their values or attributes.
#   Refer to docs/Environment.md for full details.
#
#   $BENCHERL_ROOT
#     The fully-qualified root directory of the bencherl installation.
#
#   $BENCHERL_SCRIPTS
#     The fully-qualified directory containing the bencherl scripts.
#
#   $BENCHERL_WORK
#     The fully-qualified directory where transient files can be stored.
#
#   $BENCHERL_CORES
#     The number of available logical CPU cores.
#     $BENCHERL_LCPUS and $BENCHERL_PCPUS *may* be defined, representing the
#     number of logical and physical cores, respectively.
#
#   $BENCHERL_OS
#     The type of the current operating system. This is normally a broad
#     classification (Linux, SunOS, etc) and not indicative of a specific
#     distribution.
#
# ======================================================================

# ======================================================================
# Configuration Compatibility
# ======================================================================
#
# If the special variable BENCHERL_COMPAT is defined, it is evaluated as a
# Boolean and, if 'true', configuration variables defined by the original
# bencherl distribution are recognized and converted into their BENCHERL_xxx
# forms.
#
# The current default behavior is as if this variable had the value 'false'
# when sourcing the top-level configuration file (old-style configuration
# variables are ignored) and 'true' when sourcing benchmark-specific
# configuration files (old-style configuration variables are recognized).
#
# If this variable is explicitly defined, it applies to ALL configuration
# files.
#
# BENCHERL_COMPAT=false

# ======================================================================
# Result Set
# ======================================================================
#
# $BENCHERL_LABEL specifies the name of the result set from running
# benchmarks.
#
# This is the value specified on the command line with the '-n' option.
# If specified in the file and on the command line, the command line takes
# precedence
#
# BENCHERL_LABEL="$(date +%Y.%m.%d-%H.%M.%S)"

# ======================================================================
# What Benchmarks to Run
# ======================================================================
#
# The BENCHERL_INCLUDE and BENCHERL_EXCLUDE Lists interact to define the set
# of benchmarks to be run:
#
# - If BENCHERL_INCLUDE is not empty, it defines the initial List of benchmarks
#   to run. The special value '*' is equivalent to all available benchmarks.
#
# - If BENCHERL_EXCLUDE is not empty, it defines the List of benchmarks to
#   exclude from those defined by BENCHERL_INCLUDE, or from the List of all
#   available benchmarks if BENCHERL_INCLUDE is empty.
#
# If neither List is defined, no benchmarks are run.
#
# BENCHERL_INCLUDE='parallel'
# BENCHERL_EXCLUDE='timer_wheel'

# ======================================================================
# Benchmark Duration
# ======================================================================
#
# $BENCHERL_ITERATIONS specifies the number of times each benchmark is run in
# each execution environment. Values less than 1 are silently ignored and
# cause the default value of '1' to be used.
#
# $BENCHERL_LENGTH specifies which version of each benchmark to run.
# Acceptable values are 'short', 'intermediate', and 'long'. The value
# 'medium' is an alias for 'intermediate'.
# The exact interpretation of the value is determined by each benchmark.
#
# BENCHERL_LENGTH=short
# BENCHERL_ITERATIONS=1

# ======================================================================
# Benchmark Measurements
# ======================================================================
#
# $BENCHERL_OUTPUT specifies what output to include in results files.
#
# TODO: This needs to be documented!
#
# BENCHERL_OUTPUT='avg_min_max'

# ======================================================================
# Nodes
# ======================================================================
#
# bencherl always starts on the node named by $BENCHERL_MASTER. Slave nodes
# may be used in tests by defining one or more non-negative integers in the
# BENCHERL_NUM_SLAVES Integer List. For each number in $BENCHERL_NUM_SLAVES,
# each benchmark will be run with that number of slaves. The names of the
# slaves will be taken from the $BENCHERL_SLAVES List, which will be extended
# to the number of nodes as needed.
#
# Negative values in $BENCHERL_NUM_SLAVES (after sequence resolution) are
# silently discarded.
#
# If the Boolean $BENCHERL_SETUP_SLAVES evaluates to 'true', the slave nodes
# will be started on the local host, and it would almost certainly be
# problematic if those nodes' names included host suffixes that did not
# resolve to the current host. If you're using slaves on other hosts, you
# likely want to specify them explicitly and handle their setup yourself.
#
# When node names need to be created, they are generated with or without a
# host suffix based on the setting of the Boolean $BENCHERL_USE_LONGNAMES.
# when $BENCHERL_USE_LONGNAMES is true, $BENCHERL_HOSTNAME is used to provide
# the host suffix.
#
# BENCHERL_HOSTNAME="$(hostname)"
# BENCHERL_USE_LONGNAMES=true
# BENCHERL_MASTER="master@$BENCHERL_HOSTNAME"
# BENCHERL_NUM_SLAVES=0
# BENCHERL_SLAVES="slaveN@$BENCHERL_HOSTNAME"
# BENCHERL_SETUP_SLAVES=true

# ======================================================================
# Schedulers
# ======================================================================
#
# BENCHERL_NUM_SCHEDULERS is an Integer List used to define the number of
# Erlang schedulers to run each benchmark with. For each positive value in
# the evaluated list, each benchmark is run with that number of schedulers
# specified with the +S option.
#
# Values in $BENCHERL_NUM_SCHEDULERS (after sequence resolution) that are
# less than 1 are silently discarded.
#
# If the list resolves to more than one value, the value '1' is added (if not
# already present) in order to provide relative performance measurements.
#
# BENCHERL_NUM_SCHEDULERS='1'

# ======================================================================
# Erlang Versions
# ======================================================================
#
# BENCHERL_OTPS is a comma-delimited List of labeled paths of OTP installations
# to use for benchmarks, in the form "Label=Path1,Another=Path2,..."
#
# Label is roughly constrained to something resembling a shell variable,
# though it is never used as one (it IS used as part of a filename, and as
# a label in gnuplot, which has formatting implications).
#
# Path can either be the path to an 'erl' executable or to an OTP installation
# directory under which 'bin/erl' is found. In either case, a peer 'erlc'
# program must be present or the specified Label/Path pair will be ignored.
#
# Each benchmark will be separately compiled and run with each validated OTP.
#
# If no OTPs are specified, but 'erl' is found on the $PATH (along with its
# matching 'erlc'), the the label "OTP<major-version>" is assigned to it and
# it is used as if it had been so specified.
#
# BENCHERL_OTPS='Label=/path/to/otp/or/erl'

# ======================================================================
# Erlang Arguments
# ======================================================================
#
# BENCHERL_VMARGS is a comma-delimited List of Erlang arguments to use when
# running benchmarks, in the form "Label=arg1 arg2,Another=arg3 arg4,..."
#
# Label is roughly constrained to something resembling a shell variable,
# though it is never used as one (it IS used as part of a filename, and as
# a label in gnuplot, which has formatting implications).
#
# Argument sets are provided to 'erl' on the command line unquoted, and are
# not validated beforehand.
#
# Each benchmark will be separately run with each argument set.
#
# BENCHERL_VMARGS='Default='

